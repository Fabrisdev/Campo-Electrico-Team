/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package grafica;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JTextField;

/**
 *
 * @author Fabri
 */
public class Frm3CargaOpcion1 extends javax.swing.JFrame {

    /**
     * Creates new form FrmOpcionesCargas
     */
    public Frm3CargaOpcion1() {
        initComponents();
        setTitle("PR: Tres cargas | Equipo Dinamita");
        URL icono = getClass().getResource("/grafica/img/Logo_Proyecto.png");
        ImageIcon imagenIcono = new ImageIcon(icono);
        this.setIconImage( imagenIcono.getImage());
        this.setResizable(false);
        setLocationRelativeTo(null);
        txtCargaQ1.setBackground(new Color(0,0,0,0));
        txtDistanciaQ1.setBackground(new Color(0,0,0,0));
        txtExponenteQ1.setBackground(new Color(0,0,0,0));
        txtCargaQ2.setBackground(new Color(0,0,0,0));
        txtDistanciaQ2.setBackground(new Color(0,0,0,0));
        txtExponenteQ2.setBackground(new Color(0,0,0,0));
        txtCargaQ3.setBackground(new Color(0,0,0,0));
        txtDistanciaQ3.setBackground(new Color(0,0,0,0));
        txtExponenteQ3.setBackground(new Color(0,0,0,0));
        try {
            URL urlFont = getClass().getResource("/fonts/pristina.ttf");
            String urlFontConverted = urlFont.toString().replaceAll("%20", " ");
            urlFontConverted = urlFontConverted.replaceAll("file:", "");
            urlFontConverted = urlFontConverted.replaceAll("Proyecto_Campo_Electrico.jar!/", "");
            urlFontConverted = urlFontConverted.replaceAll("jar:", "");
            Font pristinaFont = Font.createFont(Font.TRUETYPE_FONT, new File(urlFontConverted)).deriveFont(30f);
            Map<TextAttribute, Object> attributes = new HashMap<>();
            attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
            pristinaFont = pristinaFont.deriveFont(attributes);
            txtCargaQ1.setFont(pristinaFont);
            txtDistanciaQ1.setFont(pristinaFont);
            txtExponenteQ1.setFont(pristinaFont);
            txtCargaQ2.setFont(pristinaFont);
            txtExponenteQ2.setFont(pristinaFont);
            txtDistanciaQ2.setFont(pristinaFont);
            txtCargaQ3.setFont(pristinaFont);
            txtDistanciaQ3.setFont(pristinaFont);
            txtExponenteQ3.setFont(pristinaFont);
        } catch (FontFormatException | IOException ex) {
            System.out.println("No se pudo crear o cargar la font");
        }
        try {
            URL urlFont = getClass().getResource("/fonts/pristina.ttf");
            String urlFontConverted = urlFont.toString().replaceAll("%20", " ");
            urlFontConverted = urlFontConverted.replaceAll("file:", "");
            urlFontConverted = urlFontConverted.replaceAll("Proyecto_Campo_Electrico.jar!/", "");
            urlFontConverted = urlFontConverted.replaceAll("jar:", "");
            Font pristinaFont = Font.createFont(Font.TRUETYPE_FONT, new File(urlFontConverted)).deriveFont(43f);
            Map<TextAttribute, Object> attributes = new HashMap<>();
            attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
            pristinaFont = pristinaFont.deriveFont(attributes);
            lblCampo.setFont(pristinaFont);
        } catch (FontFormatException | IOException ex) {
            System.out.println("No se pudo crear o cargar la font");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCargaQ2 = new javax.swing.JTextField();
        txtCargaQ3 = new javax.swing.JTextField();
        txtCargaQ1 = new javax.swing.JTextField();
        txtDistanciaQ3 = new javax.swing.JTextField();
        txtDistanciaQ2 = new javax.swing.JTextField();
        txtDistanciaQ1 = new javax.swing.JTextField();
        txtExponenteQ3 = new javax.swing.JTextField();
        txtExponenteQ2 = new javax.swing.JTextField();
        txtExponenteQ1 = new javax.swing.JTextField();
        lblCampo = new javax.swing.JLabel();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCargaQ2.setBorder(null);
        txtCargaQ2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCargaQ2KeyReleased(evt);
            }
        });
        getContentPane().add(txtCargaQ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 130, 40));

        txtCargaQ3.setBorder(null);
        txtCargaQ3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCargaQ3KeyReleased(evt);
            }
        });
        getContentPane().add(txtCargaQ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, 130, 40));

        txtCargaQ1.setBorder(null);
        txtCargaQ1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCargaQ1KeyReleased(evt);
            }
        });
        getContentPane().add(txtCargaQ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 42, 130, 40));

        txtDistanciaQ3.setBorder(null);
        txtDistanciaQ3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDistanciaQ3KeyReleased(evt);
            }
        });
        getContentPane().add(txtDistanciaQ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 310, 150, 40));

        txtDistanciaQ2.setBorder(null);
        txtDistanciaQ2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDistanciaQ2KeyReleased(evt);
            }
        });
        getContentPane().add(txtDistanciaQ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 260, 150, 40));

        txtDistanciaQ1.setBorder(null);
        txtDistanciaQ1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDistanciaQ1KeyReleased(evt);
            }
        });
        getContentPane().add(txtDistanciaQ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 200, 150, 40));

        txtExponenteQ3.setBorder(null);
        txtExponenteQ3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExponenteQ3KeyReleased(evt);
            }
        });
        getContentPane().add(txtExponenteQ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 120, 40, 40));

        txtExponenteQ2.setBorder(null);
        txtExponenteQ2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExponenteQ2KeyReleased(evt);
            }
        });
        getContentPane().add(txtExponenteQ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, 40, 40));

        txtExponenteQ1.setBorder(null);
        txtExponenteQ1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExponenteQ1KeyReleased(evt);
            }
        });
        getContentPane().add(txtExponenteQ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 12, 40, 40));
        getContentPane().add(lblCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 370, 170, 50));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/grafica/img/3Opcion2Seleccion.png"))); // NOI18N
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean esNumero(String text){
        try{
            Double.valueOf(text);
            return true;
        }catch(NumberFormatException e){
            return false;
        }
    }
    
    void actualizarCampo(){
        double k = 9e9;
        if(esNumero(txtCargaQ1.getText()) && esNumero(txtExponenteQ1.getText()) && esNumero(txtDistanciaQ1.getText())){
            double cargaQ1 = Double.parseDouble(txtCargaQ1.getText());
            double exponenteQ1 = Double.parseDouble(txtExponenteQ1.getText());
            double cargaCompletaQ1 = cargaQ1 * Math.pow(10, exponenteQ1);
            double distanciaQ1 = Double.parseDouble(txtDistanciaQ1.getText());
            double campoQ1 = (k * Math.abs(cargaCompletaQ1)) / Math.pow(distanciaQ1, 2);
            if(esNumero(txtCargaQ2.getText()) && esNumero(txtExponenteQ2.getText()) && esNumero(txtDistanciaQ2.getText())){
                double cargaQ2 = Double.parseDouble(txtCargaQ2.getText());
                double exponenteQ2 = Double.parseDouble(txtExponenteQ2.getText());
                double cargaCompletaQ2 = cargaQ2 * Math.pow(10, exponenteQ2);
                double distanciaIncompletaQ2 = Double.parseDouble(txtDistanciaQ2.getText());
                double distanciaQ2 = distanciaQ1 + distanciaIncompletaQ2;
                double campoQ2 = (k * Math.abs(cargaCompletaQ2)) / Math.pow(distanciaQ2, 2);
                if(esNumero(txtCargaQ3.getText()) && esNumero(txtExponenteQ3.getText()) && esNumero(txtDistanciaQ3.getText())){
                    double distanciaIncompletaQ3 = Double.parseDouble(txtDistanciaQ3.getText());
                    double distanciaQ3 = distanciaQ2 + distanciaIncompletaQ3;
                    if(esPositivo(distanciaQ1) && esPositivo(distanciaQ2) && esPositivo(distanciaQ3)){
                        double cargaQ3 = Double.parseDouble(txtCargaQ3.getText());
                        double exponenteQ3 = Double.parseDouble(txtExponenteQ3.getText());
                        double cargaCompletaQ3 = cargaQ3 * Math.pow(10, exponenteQ3);
                        double campoQ3 = (k * Math.abs(cargaCompletaQ3)) / Math.pow(distanciaQ3, 2);
                        double campoResultante;
                        if(cargaCompletaQ1 > 0 && cargaCompletaQ2 > 0 && cargaCompletaQ3 > 0)
                            campoResultante = campoQ2 + campoQ3 + campoQ1;
                        else if(cargaCompletaQ1 < 0 && cargaCompletaQ2 > 0 && cargaCompletaQ3 > 0)
                            campoResultante = (campoQ2 + campoQ3) - campoQ1;
                        else if(cargaCompletaQ1 > 0 && cargaCompletaQ2 < 0 && cargaCompletaQ3 > 0)
                            campoResultante = (campoQ1 + campoQ3) - campoQ2;
                        else if(cargaCompletaQ1 > 0 && cargaCompletaQ2 > 0 && cargaCompletaQ3 < 0)
                            campoResultante = (campoQ1 + campoQ2) - campoQ3;
                        else if(cargaCompletaQ1 > 0 && cargaCompletaQ2 < 0 && cargaCompletaQ3 < 0)
                            campoResultante = (campoQ2 + campoQ3) - campoQ1;
                        else if(cargaCompletaQ1 < 0 && cargaCompletaQ2 > 0 && cargaCompletaQ3 < 0)
                            campoResultante = (campoQ1 + campoQ3) - campoQ2;
                        else if(cargaCompletaQ1 < 0 && cargaCompletaQ2 < 0 && cargaCompletaQ3 > 0)
                            campoResultante = (campoQ1 + campoQ2) - campoQ3;
                        else
                            campoResultante = campoQ2 + campoQ3 + campoQ1; // OK
                        DecimalFormat f = new DecimalFormat("0.##E0");
                        lblCampo.setText(f.format(campoResultante));
                    }
                }
            }
            /*
            if(cargaQ1 > 0){
                ImageIcon icon = new ImageIcon(FrmMenu.class.getResource("/grafica/img/1CargaFondoPositivo.png"));
                lblFondo.setIcon(icon);
                return;
            }
            if(cargaQ1 < 0){
                ImageIcon icon = new ImageIcon(FrmMenu.class.getResource("/grafica/img/1CargaFondoNegativo.png"));
                lblFondo.setIcon(icon);
                return;
            }
            ImageIcon icon = new ImageIcon(FrmMenu.class.getResource("/grafica/img/1CargaFondo.png"));
            lblFondo.setIcon(icon);
            */
        }
    }
    
    void revisarExponente(JTextField jText){
        if(jText.getText().equals("")){
            jText.setBackground(new Color(0,0,0,0));
            lblCampo.setText(null);
            return;
        }
        if(esNumero(jText.getText())){
            double exponente = Double.parseDouble(jText.getText());
            if(exponente >= -12 && exponente <= 12){
                actualizarCampo();
                jText.setBackground(new Color(0,0,0,0));
                return;
            }
        }
        jText.setBackground(new Color(100,0,0,100));
        lblCampo.setText(null);
    }
    
    void revisarTexto(JTextField jText){
        if(esNumero(jText.getText())){
            actualizarCampo();
            jText.setBackground(new Color(0,0,0,0));
            return;
        }
        if(jText.getText().equals("")){
            lblCampo.setText(null);
            jText.setBackground(new Color(0,0,0,0));
            return;
        }
        jText.setBackground(new Color(100,0,0,100));
        lblCampo.setText(null);
    }
    
    boolean esPositivo(double numero){
        return numero > 0;
    }
    
    void revisarTextoPositivo(JTextField jText){
        if(esNumero(jText.getText())){
            double valor = Double.parseDouble(jText.getText());
            if(esPositivo(valor)){
                actualizarCampo();
                jText.setBackground(new Color(0,0,0,0));
                return;
            }
        }
        if(jText.getText().equals("")){
            lblCampo.setText(null);
            jText.setBackground(new Color(0,0,0,0));
            return;
        }
        jText.setBackground(new Color(100,0,0,100));
        lblCampo.setText(null);
    }
    
    private void txtCargaQ1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCargaQ1KeyReleased
        revisarTexto(txtCargaQ1);
    }//GEN-LAST:event_txtCargaQ1KeyReleased

    private void txtDistanciaQ1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDistanciaQ1KeyReleased
        revisarTextoPositivo(txtDistanciaQ1);
    }//GEN-LAST:event_txtDistanciaQ1KeyReleased

    private void txtExponenteQ1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExponenteQ1KeyReleased
        revisarExponente(txtExponenteQ1);
    }//GEN-LAST:event_txtExponenteQ1KeyReleased

    private void txtCargaQ3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCargaQ3KeyReleased
        revisarTexto(txtCargaQ3);
    }//GEN-LAST:event_txtCargaQ3KeyReleased

    private void txtCargaQ2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCargaQ2KeyReleased
        revisarTexto(txtCargaQ2);
    }//GEN-LAST:event_txtCargaQ2KeyReleased

    private void txtDistanciaQ2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDistanciaQ2KeyReleased
        revisarTextoPositivo(txtDistanciaQ2);
    }//GEN-LAST:event_txtDistanciaQ2KeyReleased

    private void txtDistanciaQ3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDistanciaQ3KeyReleased
        revisarTextoPositivo(txtDistanciaQ3);
    }//GEN-LAST:event_txtDistanciaQ3KeyReleased

    private void txtExponenteQ2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExponenteQ2KeyReleased
        revisarExponente(txtExponenteQ2);
    }//GEN-LAST:event_txtExponenteQ2KeyReleased

    private void txtExponenteQ3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExponenteQ3KeyReleased
       revisarExponente(txtExponenteQ3);
    }//GEN-LAST:event_txtExponenteQ3KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm3CargaOpcion1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm3CargaOpcion1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm3CargaOpcion1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm3CargaOpcion1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm3CargaOpcion1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblCampo;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JTextField txtCargaQ1;
    private javax.swing.JTextField txtCargaQ2;
    private javax.swing.JTextField txtCargaQ3;
    private javax.swing.JTextField txtDistanciaQ1;
    private javax.swing.JTextField txtDistanciaQ2;
    private javax.swing.JTextField txtDistanciaQ3;
    private javax.swing.JTextField txtExponenteQ1;
    private javax.swing.JTextField txtExponenteQ2;
    private javax.swing.JTextField txtExponenteQ3;
    // End of variables declaration//GEN-END:variables
}
